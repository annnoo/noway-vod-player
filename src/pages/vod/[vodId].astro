---
import type { ExtendedVodResponse } from '../../lib/types';
import Layout from '../../layouts/Layout.astro';
import TwitchChannelEmbed from '../../components/react/vod/TwitchChannelEmbed';
import EventTimeline from '../../components/react/vod/EventTimeline';
import "../../styles/global.css";
import { Spotify } from '@/components/react';
const { vodId } = Astro.params;
const offset = Astro.url.searchParams.get('offset') || '0';

let vodData: ExtendedVodResponse | null = null;
let error: string | null = null;
	const playlist = await fetch(`http://website-backend.noway.gg/playlist/stream/${vodId}`).then(res => res.json()).catch(err => {
		console.error('Error fetching playlist:', err);
		return null;
	});
const playlistForEmbed = playlist?.spotifyUrl?.split('https://open.spotify.com/')[1]
try {
	const response = await fetch(`http://website-backend.noway.gg/vod/${vodId}/events`);

	
	if (!response.ok) {
		throw new Error(`Failed to load VOD data: ${response.status} ${response.statusText}`);
	}
	
	vodData = await response.json();
} catch (err) {
	console.error('Error loading VOD data:', err);
	error = err instanceof Error ? err.message : 'Unknown error occurred';
}

---
    <script is:inline src= "https://player.twitch.tv/js/embed/v1.js"></script>
<Layout title={`VOD ${(vodData?.events[0].timestamp!.toLocaleString())} - Event Timeline`} description={`View VOD ${vodId} with interactive event timeline`}>
        <script src= "https://player.twitch.tv/js/embed/v1.js"></script>

	{vodData ? (
		<div class="container mx-auto p-6">
			<!-- Header Section -->
			<div class="mb-8 flex justify-between">
				<div class="flex items-center gap-4 mb-4">
					<div class="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
						<span class="text-white text-xl font-bold">üé¨</span>
					</div>
					<div>
						<h1 class="text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
							VOD {vodData.events[0].timestamp!.toLocaleString()}
						</h1>
						<div class="flex items-center gap-4 text-gray-400 mt-1">
							<span class="flex items-center gap-1">
								‚è±Ô∏è {Math.floor(vodData.vodDuration / 60)}m {vodData.vodDuration % 60}s
							</span>
							<span class="flex items-center gap-1">
								üìä {vodData.totalEvents} events
							</span>
						
						</div>
					</div>
				</div>

{playlist && (
					<div class="flex items-center h-full flex-col ml-auto">

    <div class="rounded-lg p-3">

      <iframe
        data-testid="spotify"
        title={`spotify`}
        class="spotify-sveltekit-embed"
        src={`https://open.spotify.com/embed/${playlistForEmbed}`}
        allow="encrypted-media"
		style={{
			width:"100%",
			height:"152px",
		}
		}
      />
            </div>
			       <a 
              href={playlist?.spotifyUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              class="inline-flex items-center gap-2 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-500 hover:to-emerald-500 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 shadow-lg"
            >
              <span>üéß</span>
              <span>Listen on Spotify</span>
            </a>

							</div>

)}

     
			</div>
			
			<div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
				<!-- Video Player Section -->
				<div class="xl:sticky xl:top-6 xl:h-fit">
					<div class="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 shadow-2xl border border-gray-700/50">
						<div class="flex items-center gap-3 mb-4">
							<div class="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
							<h2 class="text-xl font-bold text-white">Live Player</h2>
						</div>
						<div class="rounded-xl overflow-hidden shadow-2xl">
							<TwitchChannelEmbed 
								client:visible
								video={vodId} 
								id={vodId}
								offsetSeconds={offset ? parseInt(offset) : 0}
								
								width="100%" 
								height="400px" 
							/>
						</div>
					</div>
				</div>
				
				<!-- Event Timeline Section -->
				<div class="xl:max-h-screen xl:overflow-y-auto">
						<EventTimeline client:load events={vodData.events} />
				</div>
			</div>
		</div>
	) : error ? (
		<div class="container mx-auto p-6">
			<div class="bg-gradient-to-br from-red-900/30 to-pink-900/30 backdrop-blur-sm border border-red-500/30 rounded-2xl p-8 shadow-2xl">
				<div class="text-center">
					<div class="w-16 h-16 bg-gradient-to-br from-red-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
						<span class="text-white text-2xl">‚ö†Ô∏è</span>
					</div>
					<h1 class="text-3xl font-bold text-red-300 mb-4">Error Loading VOD</h1>
					<p class="text-red-200 mb-6 max-w-md mx-auto">{error}</p>
					<a href="/" class="inline-flex items-center gap-2 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105">
						‚Üê Back to Home
					</a>
				</div>
			</div>
		</div>
	) : (
		<div class="container mx-auto p-6">
			<div class="text-center">
				<div class="relative">
					<div class="animate-spin rounded-full h-32 w-32 border-4 border-gray-700 border-t-purple-500 mx-auto mb-6"></div>
					<div class="absolute inset-0 flex items-center justify-center">
						<div class="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full animate-pulse"></div>
					</div>
				</div>
				<h2 class="text-2xl font-bold mb-2 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
					Loading VOD Data...
				</h2>
				<p class="text-gray-400">Fetching events and timeline information</p>
			</div>
		</div>
	)}
</Layout>
